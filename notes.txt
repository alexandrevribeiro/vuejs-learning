# How VueJS works
VueJS creates a template based on the HTML code, stores that internally and then uses this template to create the real HTML code, which at the end is rendered as the DOM.
In other words, a VueJS instance is like a "layer" between the code itself and the HTML being rendered in the browser. This "layer" do the following steps:
  1) Takes the HTML code
  2) Creates a template for it
  3) Renders this template (converting things like String Interpolation to real texts)
  4) Outputs the final HTML code

# How the VueJS Template Syntax and Instance work together
All properties inside "data" and all functions inside "methods" can be directly accessed in the template as "root" properties and functions.

# Accessing Data in the Vue Instance
VueJS proxies the properties of the "data" object as well as the functions of the "methods" so that they can be accessed inside the VueJS instance through "this". Example:
    new Vue({
            data: { title: 'Any title' },
            methods: {
                anyFunction: function() {
                    return this.title; // Note the "this" being used to access the property
                }
            }
        });

# Binding attributes
- In order to we to be able to use VueJS data (properties and methods) inside an HTML attribute we should bind it dynamically through the "v-bind" directive VueJS ships with. 
- The name of the attribute we want to bind should be passed as an argument to the "v-bind" directive by adding a colon and passing the attribute name. 
- Remember that inside the attribute it's already VueJS template, so we don't use curly braces.
- Example:
    <a v-bind:href="link">Google</a>

# Understanding and Using Directives
- A directive is basically an instruction you place in you code. 
- VueJS ships with just a few built-in directives, since VueJS itself already covers most use-cases you might want to cover.

# Disabling Re-Rendering with "v-once"
Sometimes you may need to render the value of a VueJS data in an HTML element only once, that is, you don't want the element to be updated when the data changes. You can do this by using the "v-once" directive. Example:
    <h1 v-once>{{ title }}</h1>  --> The element value won't be updated when "title" is changed

# Outputting raw HTML with "v-html"
VueJS doesn't render HTML content by default. Thus to render it inside an element you should use the "v-html" directive passing as its value the name of the VueJS data that contains the HTML. Example:
    <p v-html="linkHtml"></p>
    
# Listening events
To listen to a DOM event we need to use the "v-on" directive, which in turn expects the event name as argument. The function to be called should be passed as the value of the directive. Example:
    <button v-on="doSomething">Click me</button>

# Getting Event data from the Event object
The event object created by the DOM can be easily accessed by the callback function by just expecting it as an argument. Example:
    methods: {
        updateCoordinates: function(event) { this.x = event.clientX; }
    }

# Passing your own Arguments to the Event functions
- You can pass your own arguments to the event function by just specifying them as arguments of the function in the Vue template. 
- And you can also pass the "event object" created by the DOM through the "$event" protected variable.
- Example:
    <button v-on:click="increase(2, $event)">Click me</button>

# Event Modifiers
- Event modifiers allow us to modify the behavior of an event. It could be done by adding a "." and the modifier name after the event name.
- Available event modifiers: https://vuejs.org/v2/guide/events.html#Event-Modifiers
- Example:
    <p v-on:mousemove="updateCoordinates">
        <!-- The "stop" modifier below prevents further propagation of the event -->
        Coordinates {{ x }} / {{ y }} - <span v-on:mousemove.stop="">[DEAD SPOT]</span>
    </p>

# Keyboard event modifiers
- When listening for keyboard events, we often need to check for common key codes. Vue also allows adding key modifiers for v-on when listening for key events.
- Available key modifiers: https://vuejs.org/v2/guide/events.html#Key-Modifiers
- Example:
    <!-- only call vm.submit() when the key is enter -->
    <input v-on:keyup.enter="submit">

# Writing JavaScript Code in the Templates
All the places in the template you can access the Vue instance, you can write any valid JavaScript code, as long as only one expression, and it doesn't contains an "if", a for loop, or something like that.

# Two way Binding
- Two way binding allows us to bind a property in two directions, so that every tine it is update in the Vue instance the change is also reflected in the template and vice-versa.
- This is made through the "v-bind" attribute.

# Computed properties
- Computed properties are declared as functions (but used as properties in the templates) in the "computed" property of the Vue instance.
- In other words, in computed, we set up the property and then, as a function, we set up the logic how this property should be computed.
- Vue analysis the properties used inside computed properties and also caches the result, making the computed property be re-calculated only when there is need, which is when any property being used inside it is changed.
- Example:
    new Vue({
            data: { counter: 0 },
            computed: {
                output: function() {
                    // This function will be called only when "counter" is changed
                    return this.counter > 10 ? '> 10' : '< 10';
                }
            }
        });

# Watch
- With "watch" you can execute code when a specific property is changed.
- You can declare the watched properties in the "watch" property of the Vue instance.
- However it's better to use "computed properties" whenever you can, since they are more optimized because the cache Vue creates, and so on.
- You may execute async codes in it
- Example: 
    new Vue({
            data: { counter: 0 },
            watch: {
                counter: function() {
                    // This function will be called only when "counter" is changed
                    return this.counter > 10 ? '> 10' : '< 10';
                }
            }
        });

# Methods vs Computed vs Watch
- Methods:
    - For cases where you need to execute a code when any data property is changed.
    - It may return a value and be used in the template.
- Computed properties: 
    - For cases where you need to execute a code when any property BEING USED inside the function is changed.
    - It should return a value that's the value of the computed property.
    - It may be used in the template as a property.
    - When returning a value (the value of the computed prop), it always needs to run synchronously.
    - It's the most optimized option since Vue caches the result of it.
- Watch: 
    - For cases where you need to execute a code when a specific property is changed.
    - It isn't available as a function to be used in the template.
    - It shouldn't return a value since no place calls it.
    - It may execute asynchronously code.

# Shorthands
Instead of using "v-on:[event]" and "v-bind:[attr]" you can also use the shortcuts for them:
    - "v-on:[event]" -> "@:[event]". Example: @click=""
    - "v-bind:[attr]" -> ":[attr]". Example: :href=""