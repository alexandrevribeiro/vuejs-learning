# How VueJS works
VueJS creates a template based on the HTML code, stores that internally and then uses this template to create the real HTML code, which at the end is rendered as the DOM.
In other words, a VueJS instance is like a "layer" between the code itself and the HTML being rendered in the browser. This "layer" do the following steps:
  1) Takes the HTML code
  2) Creates a template for it
  3) Renders this template (converting things like String Interpolation to real texts)
  4) Outputs the final HTML code

# How the VueJS Template Syntax and Instance work together
All properties inside "data" and all functions inside "methods" can be directly accessed in the template as "root" properties and functions.

# Accessing Data in the Vue Instance
VueJS proxies the properties of the "data" object as well as the functions of the "methods" so that they can be accessed inside the VueJS instance through "this". Example:
    new Vue({
            data: { title: 'Any title' },
            methods: {
                anyFunction: function() {
                    return this.title; // Note the "this" being used to access the property
                }
            }
        });

# Binding attributes
- In order to we to be able to use VueJS data (properties and methods) inside an HTML attribute we should bind it dynamically through the "v-bind" directive VueJS ships with. 
- The name of the attribute we want to bind should be passed as an argument to the "v-bind" directive by adding a colon and passing the attribute name. 
- Remember that inside the attribute it's already VueJS template, so we don't use curly braces.
- Example:
    <a v-bind:href="link">Google</a>

# Understanding and Using Directives
- A directive is basically an instruction you place in you code. 
- VueJS ships with just a few built-in directives, since VueJS itself already covers most use-cases you might want to cover.

# Disabling Re-Rendering with "v-once"
Sometimes you may need to render the value of a VueJS data in an HTML element only once, that is, you don't want the element to be updated when the data changes. You can do this by using the "v-once" directive. Example:
    <h1 v-once>{{ title }}</h1>  --> The element value won't be updated when "title" is changed

# Outputting raw HTML with "v-html"
VueJS doesn't render HTML content by default. Thus to render it inside an element you should use the "v-html" directive passing as its value the name of the VueJS data that contains the HTML. Example:
    <p v-html="linkHtml"></p>
    
# Listening events
To listen to a DOM event we need to use the "v-on" directive, which in turn expects the event name as argument. The function to be called should be passed as the value of the directive. Example:
    <button v-on="doSomething">Click me</button>

# Getting Event data from the Event object
The event object created by the DOM can be easily accessed by the callback function by just expecting it as an argument. Example:
    methods: {
        updateCoordinates: function(event) { this.x = event.clientX; }
    }

# Passing your own Arguments to the Event functions
- You can pass your own arguments to the event function by just specifying them as arguments of the function in the Vue template. 
- And you can also pass the "event object" created by the DOM through the "$event" protected variable.
- Example:
    <button v-on:click="increase(2, $event)">Click me</button>