# How VueJS works
VueJS creates a template based on the HTML code, stores that internally and then uses this template to create the real HTML code, which at the end is rendered as the DOM.
In other words, a VueJS instance is like a "layer" between the code itself and the HTML being rendered in the browser. This "layer" do the following steps:
  1) Takes the HTML code
  2) Creates a template for it
  3) Renders this template (converting things like String Interpolation to real texts)
  4) Outputs the final HTML code

# How the VueJS Template Syntax and Instance work together
All properties inside "data" and all functions inside "methods" can be directly accessed in the template as "root" properties and functions.

# Accessing Data in the Vue Instance
VueJS proxies the properties of the "data" object as well as the functions of the "methods" so that they can be accessed inside the VueJS instance through "this". Example:
    new Vue({
            data: { title: 'Any title' },
            methods: {
                anyFunction: function() {
                    return this.title; // Note the "this" being used to access the property
                }
            }
        });

# Binding attributes
- In order to we to be able to use VueJS data (properties and methods) inside an HTML attribute we should bind it dynamically through the "v-bind" directive VueJS ships with. 
- The name of the attribute we want to bind should be passed as an argument to the "v-bind" directive by adding a colon and passing the attribute name. 
- Remember that inside the attribute it's already VueJS template, so we don't use curly braces.
- Example:
    <a v-bind:href="link">Google</a>

# Understanding and Using Directives
- A directive is basically an instruction you place in you code. 
- VueJS ships with just a few built-in directives, since VueJS itself already covers most use-cases you might want to cover.

# Disabling Re-Rendering with "v-once"
Sometimes you may need to render the value of a VueJS data in an HTML element only once, that is, you don't want the element to be updated when the data changes. You can do this by using the "v-once" directive. Example:
    <h1 v-once>{{ title }}</h1>  --> The element value won't be updated when "title" is changed

# Outputting raw HTML with "v-html"
VueJS doesn't render HTML content by default. Thus to render it inside an element you should use the "v-html" directive passing as its value the name of the VueJS data that contains the HTML. Example:
    <p v-html="linkHtml"></p>
    
# Listening events
To listen to a DOM event we need to use the "v-on" directive, which in turn expects the event name as argument. The function to be called should be passed as the value of the directive. Example:
    <button v-on="doSomething">Click me</button>

# Getting Event data from the Event object
The event object created by the DOM can be easily accessed by the callback function by just expecting it as an argument. Example:
    methods: {
        updateCoordinates: function(event) { this.x = event.clientX; }
    }

# Passing your own Arguments to the Event functions
- You can pass your own arguments to the event function by just specifying them as arguments of the function in the Vue template. 
- And you can also pass the "event object" created by the DOM through the "$event" protected variable.
- Example:
    <button v-on:click="increase(2, $event)">Click me</button>

# Event Modifiers
- Event modifiers allow us to modify the behavior of an event. It could be done by adding a "." and the modifier name after the event name.
- Available event modifiers: https://vuejs.org/v2/guide/events.html#Event-Modifiers
- Example:
    <p v-on:mousemove="updateCoordinates">
        <!-- The "stop" modifier below prevents further propagation of the event -->
        Coordinates {{ x }} / {{ y }} - <span v-on:mousemove.stop="">[DEAD SPOT]</span>
    </p>

# Keyboard event modifiers
- When listening for keyboard events, we often need to check for common key codes. Vue also allows adding key modifiers for v-on when listening for key events.
- Available key modifiers: https://vuejs.org/v2/guide/events.html#Key-Modifiers
- Example:
    <!-- only call vm.submit() when the key is enter -->
    <input v-on:keyup.enter="submit">

# Writing JavaScript Code in the Templates
All the places in the template you can access the Vue instance, you can write any valid JavaScript code, as long as only one expression, and it doesn't contains an "if", a for loop, or something like that.

# Two way Binding
- Two way binding allows us to bind a property in two directions, which means that every tine the property is changed in the Vue instance the change is also reflected in the template and vice-versa.
- This is made through the "v-model" attribute.

# Computed properties
- Computed properties are declared as functions (but used as properties in the templates) in the "computed" property of the Vue instance.
- In other words, in computed, we set up the property and then, as a function, we set up the logic how this property should be computed.
- Vue analysis the properties used inside computed properties and also caches the result, making the computed property be re-calculated only when there is need, which is when any property being used inside it is changed.
- Example:
    new Vue({
            data: { counter: 0 },
            computed: {
                output: function() {
                    // This function will be called only when "counter" is changed
                    return this.counter > 10 ? '> 10' : '< 10';
                }
            }
        });

# Watch
- With "watch" you can execute code when a specific property is changed.
- You can declare the watched properties in the "watch" property of the Vue instance.
- However it's better to use "computed properties" whenever you can, since they are more optimized because the cache Vue creates, and so on.
- You may execute async codes in it
- Example: 
    new Vue({
            data: { counter: 0 },
            watch: {
                counter: function() {
                    // This function will be called only when "counter" is changed
                    return this.counter > 10 ? '> 10' : '< 10';
                }
            }
        });

# Methods vs Computed vs Watch
- Methods:
    - For cases where you need to execute a code when any data property is changed.
    - It may return a value and be used in the template.
- Computed properties: 
    - For cases where you need to execute a code when any property BEING USED inside the function is changed.
    - It should return a value that's the value of the computed property.
    - It may be used in the template as a property.
    - When returning a value (the value of the computed prop), it always needs to run synchronously.
    - It's the most optimized option since Vue caches the result of it.
- Watch: 
    - For cases where you need to execute a code when a specific property is changed.
    - It isn't available as a function to be used in the template.
    - It shouldn't return a value since no place calls it.
    - It may execute asynchronously code.

# Shorthands
Instead of using "v-on:[event]" and "v-bind:[attr]" you can also use the shortcuts for them:
    - "v-on:[event]" -> "@:[event]". Example: @click=""
    - "v-bind:[attr]" -> ":[attr]". Example: :href=""

# Dynamic styles with CSS classes
- You can conditionally attach a CSS class to an element through the "v-bind:class" or simply ":class".
- There are 3 ways you can bind CSS classes:
    1) Binding a class name. Example:
        VueJS:
            data: { color: 'blue'}
        HTML:
            <div :class="color"></div>
            <div :class="[color, anotherName]"></div>
    
    2) Binding a JS object:
        - The argument should be a JavaScript object, where the key is the class name, and the value is a boolean which defines whether or not the class should be attached. Example:
            <div :class="{red: attachRed}"></div>
        - And instead of directly using the JS object in the HTML, you could also use a computed property. Example:
            VueJS:
                computed: {
                    divClasses: function () {
                        return {
                            red: this.attachRed,
                            blue: !this.attachRed
                        };
                    }
                }
            HTML:
                <div @click="attachRed = !attachRed" :class="divClasses"></div>
    
    3) Binding both class names and JS objects. Example:
        <div class="demo" :class="[color, {red: attachRed}]"></div>

# Dynamic styles without CSS classes
- Besides using classes, you can also directly manipulate the style by using the ":style". 
- And as with :class, you can use a JS object as the argument, a computed property or an array that may contain both.
- Example:
    VueJS:
        new Vue({
            data: { color: 'gray', width: 100 },
            computed: {
                myStyle: function () {
                    return {
                        backgroundColor: this.color,
                        width: this.width + 'px'
                    };
                }
            }
        });
    HTML:
        <div class="demo" :style="{backgroundColor: color}"></div>
        <div class="demo" :style="myStyle"></div>

# Using v-if
- "v-if" directive can be used to define whether or not an element will be rendered
- Something important to notice is that it doesn't just show/hide an element, it attaches/detaches (adds/removes) the element
- The value of the directive can be any valid in-line JavaScript code
- It should also be used with "v-else"
- It has better performance than "v-show" since it detaches the element

# Using v-show
- "v-show" directive can be used to show/hide an element
- It has less performance than "v-if" since it just hides the element

# Using v-for
- "v-for" directive can be used to iterate through arrays
- If you want to use the index you can use the following syntax: v-for="(item, index) in items"
- When you want to use non-nested elements with v-for you can use a <template> element for this
- It's also possible to iterate through objects. Example: v-for="value in myObj"
- The property name and index might be accessed in the following way: v-for="(value, key, index) in myObj"
- You can also iterate through numbers. Example: v-for="n in 10"
- Two important behaviors that happens behind the scenes:
    1. When adding items to an array (with "push" method), VueJS automatically proxies the push method really adding the value to the array (that's not the default JS behavior)
    2. VueJS updates the list by simply updating the position in the array where something changed. It doesn't track the item itself, only the position. 
        - So if you want to make VueJS not only aware of the position but also the actual list item, you need to assign a unique key for each list item.
        - This can be done by using the "v-bind:key" or just ":key". 
        - It's also a good practice to use the list item as the key when it's not being used more than once in the list
        - It may be useful, for instance, when reordering the items
        - Example: <li v-for="(ingredient, i) in ingredients" :key="ingredient"></li>


# Folder structures
Option 1) For small projects (all files in the root):
    src/
        App.vue
        Component_1.vue
        Component_2.vue
        Component_N.vue

Option 2) For small and medium projects (components in a different folder):
    src/
        App.vue
        components/
            Component_1.vue
            Component_2.vue
            Component_N.vue

Option 3) For small, medium and big projects (files grouped by feature):
    src/
        App.vue
        users/
            account/
            analytics/
        shop/
            main/
            checkout/

# Passing data to child components
For transferring data from a parent component to a child one we use the "props" in the child component.
Every property may be passed as an attribute in the parent component. 
    - Note: Remember that as Objects are reference types, when they are passed to a child component
    and they're changed there, their values are also changed in the parent component.

Ex.:

    Child component:
        <script>
        export default {
            props: ['name']
        }
        </script>

    Parent component (using v-bind to an existing prop called "name"):
        <template>
            <my-component :name="name" />
        </template>

Possibilities to specify props:
    1) Just the name:
        props: ['myName'],

    2) Validating it by type:
        props: {
            myName: String
        },

    3) With more complex validations:
        props: {
            myName: {
                type: String,
                required: true
            }
        },

    4) With default values:
        props: {
            myName: {
                type: String,
                default: 'Alexandre'
            }
        },

    5) Default for objects:
        props: {
            myName: {
                type: Object,
                default() {
                    return { name: 'Me!'};
                }
            }
        },

# Emitting custom event from a child component to the parent
1) In the child component we can use the "this.$emit" to emit an event to the parent:
    methods: {
        resetName() {
            this.myName = 'Anything';
            this.$emit('nameWasReset', this.myName);
        }
    },

2) In the parent component we can listen to the custom event using "v-on (@)", like any other event:
    <app-user-detail :myName="name" @nameWasReset="name = $event" />

# Components communication with Callback functions
To use callback functions of a parent component in a child component you just need to expect it as a prop. Ex.:

    - Parent component:
        <app-user-detail :resetCallback="resetFunc" /> -> "resetFunc" points to a local function

    - Child component:
        props: {
            resetCallback: Function
        }

# Sharing data between sibling components

Option 1) Emitting a custom event to the parent, which will listening it and send the data again to all children.
Option 2) Using callback functions like described above
Option 3) Using an event bus, which consists of exporting a new Vue instance and use it to emit/listen to events. Ex.:
    - main.js:
        export const eventBus = new Vue();
        
    - Component1.Vue:
        import { eventBus } from '../main';
        myMethod() {
            eventBus.$emit('ageWasEdited', this.userAge);
        }

    - Component2.Vue:
        import { eventBus } from '../main';
        created() {
            eventBus.$on('ageWasEdited', (age) => {
                this.userAge = age;
            });
        },

# Passing content with slots
- When you want to pass HTML content to a component it may be done using "slot". Ex.:
    - Component:
        <template>
            <div> <slot></slot> </div>
        </template>
    
    - Parent:
        <my-component>
            <h2>Title</h2>
            <p>Any content here.</p>
        </my-component>

- Scoped styles are handled in the child component that has the "slot" tag instead of the parent one
- Everything else besides styling is handled in the parent component
- When you want parts of the content being rendered in different places in the child component (different slots), it can be done by using named slots. Ex.:
    - Component:
        <slot name="title"></slot>
        <slot name="content"></slot>

    - Parent:
        <my-component>
            <h2 slot="title">Title</h2>
            <p slot="content">Any content here.</p>
        </my-component>

- When there's a non-named slot this is treated by VueJS as the default slot, meaning that every element being passed to the component without a slot name will be rendered in this default slot. Ex.:  
    - Component:
        <slot name="title"></slot>
        <slot></slot>

    - Parent:
        <my-component>
            <h2 slot="title">Title</h2>
            <p>Any content here.</p>
        </my-component>

- It is also possible to define default content for the slots, by just adding the default content inside the slot tag. In other words, you can specify default content inside a slot, but it will be replaced as soon as you pass content to it in the parent component. Ex.:
     - Component:
        <slot name="title">Default title</slot>
        <slot></slot>

    - Parent:
        <my-component>
            <p>Any content here.</p>
        </my-component>

# Dynamic Components
You can dynamically render a component by using the "<component>" component. ;) Ex.:
    <component :is="selectedComponent">
        Any content!
    </component>